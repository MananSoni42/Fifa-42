{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Fifa-42 An 11 v 11 football game where you play against the computer. Choose your own formations and get ready to play! Play Windows | Linux Instructions: * Download the ZIP file given below and extract it. * Play the game by clicking the on `Fifa-42` Basics This is an 11 v 11 football game where you (Team 1) play against the computer (Team 2) You control a single player (marked by a red dot on top) Running into opponent players causes both of you to be thrown back and lose possession of the ball Controls Key Action Arrow keys Move the (selected) player Q,W,E - A,D - Z,X,C Shoot the ball ESC Bring up / Collapse Pause menu SPACE Toggle if teams maintain formation BACKSPACE Quit and return to main menu Contributing Feel free to contribute features / point out errors. Fork this repository and make a pull request. Make sure you go through the wiki before you submit a PR License This project is licensed under the MIT License","title":"Home"},{"location":"#fifa-42","text":"An 11 v 11 football game where you play against the computer. Choose your own formations and get ready to play!","title":"Fifa-42  "},{"location":"#play","text":"","title":"Play"},{"location":"#windows-linux","text":"Instructions: * Download the ZIP file given below and extract it. * Play the game by clicking the on `Fifa-42`","title":"Windows |  Linux"},{"location":"#basics","text":"This is an 11 v 11 football game where you (Team 1) play against the computer (Team 2) You control a single player (marked by a red dot on top) Running into opponent players causes both of you to be thrown back and lose possession of the ball","title":"Basics"},{"location":"#controls","text":"Key Action Arrow keys Move the (selected) player Q,W,E - A,D - Z,X,C Shoot the ball ESC Bring up / Collapse Pause menu SPACE Toggle if teams maintain formation BACKSPACE Quit and return to main menu","title":"Controls"},{"location":"#contributing","text":"Feel free to contribute features / point out errors. Fork this repository and make a pull request. Make sure you go through the wiki before you submit a PR","title":"Contributing"},{"location":"#license","text":"This project is licensed under the MIT License","title":"License"},{"location":"about/","text":"This game was originally started as a final project for our final programming class (in 2013). The game was originally written in ANSI C (the only programming language we knew), only worked in a console and took us a whopping 8 months to write! Looking back, the game was a perfect example of how to NOT write code - We used NO documentation or comments, the variables were single letters and the entire codebase was a single file. // When I wrote the code, only god and I knew how it worked, now only god knows We decided to rewrite the entire game in Python with an aim of making the original game more accessible. It has since turned into a full fledged project that will (hopefully) have: * Good documentation making it easy for anyone to contribute * An option to play online (with multiplayer support) * A Reinforcement-Learning based computer team that adapts itself to defeat you. Progress [x] Create an executable game - release v1.0 [ ] Add a web UI - Release - release v2.0 [ ] Port python to JavaScript [ ] Set up local single player (static - requires only frontend) [ ] Add online multi player (requires a backend) [ ] Set up better computer agents [x] Set up the original AI team [ ] Come up with an improved (hard-coded) AI team [ ] Train a realistic AI team using Reinforcement Learning - release v3.0","title":"About"},{"location":"about/#progress","text":"[x] Create an executable game - release v1.0 [ ] Add a web UI - Release - release v2.0 [ ] Port python to JavaScript [ ] Set up local single player (static - requires only frontend) [ ] Add online multi player (requires a backend) [ ] Set up better computer agents [x] Set up the original AI team [ ] Come up with an improved (hard-coded) AI team [ ] Train a realistic AI team using Reinforcement Learning - release v3.0","title":"Progress"},{"location":"config/","text":"This game is written in Python 3.7.0 To set up a local copy, follow the steps given below: Install python (3+) and pip Debian : apt-get install python python3-pip Arch : pacman -S python python-pip Windows : Download Python (this tutorial may be helpful) Clone this repository If you have git, execute: git clone https://github.com/MananSoni42/Fifa-42.git otherwise: Download the ZIP file Install the required dependancies Ensure that you are inside the Fifa-42 directory pip install -r requirements.txt Play the game with Python Ensure that you are inside the Fifa-42/src directory python3 play.py Done! Now you can make your own changes to the game. Various command line arguements are available, see them using python3 play.py --help","title":"Installing locally"},{"location":"api-documentation/agent/","text":"agent Defines how an agent is created, drawn and updated Override the move method to create a valid custom agent Agent Objects class Agent(ABC) Abstract class that controls agents in the football game Implement the move method to instantiate a valid agent __init__ | __init__(id, team_id, pos, dir='L') Initialize a player Attributes : id int - Player's unique ID team_id int - ID of the team the player plays for pos Point - The player's initial position dir string - The player's current direction (which way it faces). Either 'R' or 'L' draw | draw(win, cam, team_id, debug=False) Draw the player as an animated sprite Attributes : win pygame.display - Window on which to draw team_id int - Required to get the correct sprite debug bool - Show additional info including the player's ID and the square used to approximate the player update | update(action, players) Update player's (in-game) state based on his action move | @abstractmethod | move(state_prev, state, reward) Implement this method for a valid agent Attributes : state_prev dict - The lsat to last game state state dict - The last game state reward list - Reward returned from this state (Not implemented) Should return a valid action","title":"Agent"},{"location":"api-documentation/agent/#agent","text":"Defines how an agent is created, drawn and updated Override the move method to create a valid custom agent","title":"agent"},{"location":"api-documentation/agent/#agent-objects","text":"class Agent(ABC) Abstract class that controls agents in the football game Implement the move method to instantiate a valid agent","title":"Agent Objects"},{"location":"api-documentation/agent/#__init__","text":"| __init__(id, team_id, pos, dir='L') Initialize a player Attributes : id int - Player's unique ID team_id int - ID of the team the player plays for pos Point - The player's initial position dir string - The player's current direction (which way it faces). Either 'R' or 'L'","title":"__init__"},{"location":"api-documentation/agent/#draw","text":"| draw(win, cam, team_id, debug=False) Draw the player as an animated sprite Attributes : win pygame.display - Window on which to draw team_id int - Required to get the correct sprite debug bool - Show additional info including the player's ID and the square used to approximate the player","title":"draw"},{"location":"api-documentation/agent/#update","text":"| update(action, players) Update player's (in-game) state based on his action","title":"update"},{"location":"api-documentation/agent/#move","text":"| @abstractmethod | move(state_prev, state, reward) Implement this method for a valid agent Attributes : state_prev dict - The lsat to last game state state dict - The last game state reward list - Reward returned from this state (Not implemented) Should return a valid action","title":"move"},{"location":"api-documentation/ball/","text":"ball Define the football used in the game Ball Objects class Ball() Implement the football used in the game __init__ | __init__(pos, sound=True) Initialize the Football Attributes : pos Point - the initial position of the ball draw | draw(win, cam, debug=False) Draw the football Attributes : win pygame.display - Window on which to draw debug bool - If enabled, show the square used to approximate the ball as well as a red border whenever the ball is not free reset | reset(pos) Reset the ball Attributes : pos Point - the initial position of the ball goal_check | goal_check(stats) Check if a goal is scored Attributes : stats Stats - Keep track of game statistics for the pause menu update_stats | update_stats(stats, player=None, goal=None, side=None) Sync ball statistics with the global variables Attributes : player Agent - Player that received the ball goal bool - True if a goal is scored side int - id of the team which conceded the goal Activates when a player receives the ball or during a goal attempt Possession: +1 if same team pass is recorded Pass: +1 to 'succ' if same team pass is recorded +1 to 'fail' if diff team pass is recorded Shot: +1 to 'succ' if a goal is scored +1 to 'fail' if goal is not scored (out of bounds) / keeper stops the ball Does not apply if player shoots towards his own goal ball_player_collision | ball_player_collision(team, stats) Check if the ball has been captured by a player Attributes : team Team - The team for which to check stats Stats - Keep track of game statistics for the pause menu check_capture | check_capture(team1, team2, stats) If the ball is not free, move the ball along with the player rather than on it's own Attributes : team1 Team - Team facing right team2 Team - Team facing left stats Stats - Keep track of game statistics for the pause menu update | update(team1, team2, action1, action2, stats) Update the ball's (in-game) state according to specified action Attributes : team1 Team - Team facing right team2 Team - Team facing left action1 list - Actions of team 1 action2 list - Actions of team 2 stats Stats - Keep track of game statistics for the pause menu Calls check_capture() and goal_check()","title":"Ball"},{"location":"api-documentation/ball/#ball","text":"Define the football used in the game","title":"ball"},{"location":"api-documentation/ball/#ball-objects","text":"class Ball() Implement the football used in the game","title":"Ball Objects"},{"location":"api-documentation/ball/#__init__","text":"| __init__(pos, sound=True) Initialize the Football Attributes : pos Point - the initial position of the ball","title":"__init__"},{"location":"api-documentation/ball/#draw","text":"| draw(win, cam, debug=False) Draw the football Attributes : win pygame.display - Window on which to draw debug bool - If enabled, show the square used to approximate the ball as well as a red border whenever the ball is not free","title":"draw"},{"location":"api-documentation/ball/#reset","text":"| reset(pos) Reset the ball Attributes : pos Point - the initial position of the ball","title":"reset"},{"location":"api-documentation/ball/#goal_check","text":"| goal_check(stats) Check if a goal is scored Attributes : stats Stats - Keep track of game statistics for the pause menu","title":"goal_check"},{"location":"api-documentation/ball/#update_stats","text":"| update_stats(stats, player=None, goal=None, side=None) Sync ball statistics with the global variables Attributes : player Agent - Player that received the ball goal bool - True if a goal is scored side int - id of the team which conceded the goal Activates when a player receives the ball or during a goal attempt Possession: +1 if same team pass is recorded Pass: +1 to 'succ' if same team pass is recorded +1 to 'fail' if diff team pass is recorded Shot: +1 to 'succ' if a goal is scored +1 to 'fail' if goal is not scored (out of bounds) / keeper stops the ball Does not apply if player shoots towards his own goal","title":"update_stats"},{"location":"api-documentation/ball/#ball_player_collision","text":"| ball_player_collision(team, stats) Check if the ball has been captured by a player Attributes : team Team - The team for which to check stats Stats - Keep track of game statistics for the pause menu","title":"ball_player_collision"},{"location":"api-documentation/ball/#check_capture","text":"| check_capture(team1, team2, stats) If the ball is not free, move the ball along with the player rather than on it's own Attributes : team1 Team - Team facing right team2 Team - Team facing left stats Stats - Keep track of game statistics for the pause menu","title":"check_capture"},{"location":"api-documentation/ball/#update","text":"| update(team1, team2, action1, action2, stats) Update the ball's (in-game) state according to specified action Attributes : team1 Team - Team facing right team2 Team - Team facing left action1 list - Actions of team 1 action2 list - Actions of team 2 stats Stats - Keep track of game statistics for the pause menu Calls check_capture() and goal_check()","title":"update"},{"location":"api-documentation/camera/","text":"camera Implementation of the game's camera Camera Objects class Camera() Class to draw different camera angles __init__ | __init__(cx, cy, mode='default') Initializes the game camera The game camera has 3 modes: default: Follows the ball while showing surrounding players zoomed: Follows the ball closely full: Displays the entire field Attributes : cx float - Camera's x coordinate cy float - Camera's y coordinate mode str - The camera mode params | @property | params() Helper method to reduce code redundancy set_mode | set_mode(mode) Set the camera's mode. Mode must be one of ['full', 'default', 'zoomed'] move | move(bx, by, alpha=P(0.9,0.9)) Move the camera to the given coordinates (Camera can't go over the field boundary) Uses exponential smoothing to minimize jittering pt | pt(p) Transform any 2-D point with respect to the camera rect_in_view | rect_in_view(r1) Check if given rectangle is within the camera's view circle_in_view | circle_in_view(x, y, rad) Check if given circle is within the camera's view rect | rect(win, col, coords, width=0) Draw a rectangle according to the cameras mode (attributes are same as pygame.draw.rect ) circle | circle(win, col, p, r, width=0) Draw a circle according to the cameras mode (attributes are same as pygame.draw.cirlce ) polygon | polygon(win, col, pts) Draw a polygon according to the cameras mode (attributes are same as pygame.draw.polygon ) blit | blit(win, path, pt, size) Blit a given sprite to the surface according to the cameras mode Attributes : win pygame.Window - window for drawing path pygame.Image - path to the sprite pt P - center of the sprite size P - size of the sprite","title":"Camera"},{"location":"api-documentation/camera/#camera","text":"Implementation of the game's camera","title":"camera"},{"location":"api-documentation/camera/#camera-objects","text":"class Camera() Class to draw different camera angles","title":"Camera Objects"},{"location":"api-documentation/camera/#__init__","text":"| __init__(cx, cy, mode='default') Initializes the game camera The game camera has 3 modes: default: Follows the ball while showing surrounding players zoomed: Follows the ball closely full: Displays the entire field Attributes : cx float - Camera's x coordinate cy float - Camera's y coordinate mode str - The camera mode","title":"__init__"},{"location":"api-documentation/camera/#params","text":"| @property | params() Helper method to reduce code redundancy","title":"params"},{"location":"api-documentation/camera/#set_mode","text":"| set_mode(mode) Set the camera's mode. Mode must be one of ['full', 'default', 'zoomed']","title":"set_mode"},{"location":"api-documentation/camera/#move","text":"| move(bx, by, alpha=P(0.9,0.9)) Move the camera to the given coordinates (Camera can't go over the field boundary) Uses exponential smoothing to minimize jittering","title":"move"},{"location":"api-documentation/camera/#pt","text":"| pt(p) Transform any 2-D point with respect to the camera","title":"pt"},{"location":"api-documentation/camera/#rect_in_view","text":"| rect_in_view(r1) Check if given rectangle is within the camera's view","title":"rect_in_view"},{"location":"api-documentation/camera/#circle_in_view","text":"| circle_in_view(x, y, rad) Check if given circle is within the camera's view","title":"circle_in_view"},{"location":"api-documentation/camera/#rect","text":"| rect(win, col, coords, width=0) Draw a rectangle according to the cameras mode (attributes are same as pygame.draw.rect )","title":"rect"},{"location":"api-documentation/camera/#circle","text":"| circle(win, col, p, r, width=0) Draw a circle according to the cameras mode (attributes are same as pygame.draw.cirlce )","title":"circle"},{"location":"api-documentation/camera/#polygon","text":"| polygon(win, col, pts) Draw a polygon according to the cameras mode (attributes are same as pygame.draw.polygon )","title":"polygon"},{"location":"api-documentation/camera/#blit","text":"| blit(win, path, pt, size) Blit a given sprite to the surface according to the cameras mode Attributes : win pygame.Window - window for drawing path pygame.Image - path to the sprite pt P - center of the sprite size P - size of the sprite","title":"blit"},{"location":"api-documentation/constants/","text":"const Game specific functions and constants Includes: the actions that a player can take possible formations recolor a player sprite Do not change these constants directly as other parts of the game rely on their correct format ACT Team formations - Must start with the keeper - Must contain positions for both left and right sides - Recommended to specify completley in terms of W and H (and PLAYER_RADIUS / BALL_RADIUS if reqd) recolor recolor(surface, color=(255, 108, 0)) Fill all pixels of the surface with color, preserve transparency.","title":"Constants"},{"location":"api-documentation/constants/#const","text":"Game specific functions and constants Includes: the actions that a player can take possible formations recolor a player sprite Do not change these constants directly as other parts of the game rely on their correct format","title":"const"},{"location":"api-documentation/constants/#act","text":"Team formations - Must start with the keeper - Must contain positions for both left and right sides - Recommended to specify completley in terms of W and H (and PLAYER_RADIUS / BALL_RADIUS if reqd)","title":"ACT"},{"location":"api-documentation/constants/#recolor","text":"recolor(surface, color=(255, 108, 0)) Fill all pixels of the surface with color, preserve transparency.","title":"recolor"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/","text":"random Create a random team i.e. team where each agent takes a random action (used for testing) RandomAgent Objects class RandomAgent(Agent) Agents that move randomly move | move(state_prev, state, reward) Move the agent randomly RandomTeam Objects class RandomTeam(Team) A team of random agents move | move(state_prev, state, reward) Move each player randomly human Create a Human team i.e. controlled by the keyboard HumanAgent Objects class HumanAgent(Agent) Agents controlled by humans draw | draw(win, cam, team_id, selected=0, debug=False) Draw the human agent. Also draws a red triangle on top of the selected player move | move(state_prev, state, reward) Move the human agent based on the keyboard HumanTeam Objects class HumanTeam(Team) A team of human players update | update(action, ball) Select a player (based on the Ball's state) and update the team's state based on the received actions and the ball's position draw | draw(win, cam, debug) Draw the human team select_player | select_player(ball) Select the player that is controlled by the keyboard Working : If ball is near the D-area, keeper gets automatic control Otherwise the player nearest to the ball has control (ties are broken randomly) formation_dir | formation_dir(id) Send player (with the given ID) to his designated place in the formation Working : If player is in-line (horizontally or vertically), move directly towards original point (U/L/D/R) Otherwise choose 2 directions that take you closer to the original point and choose one of them randomly (UL/UR/DL/DR) move | move(state_prev, state, reward) Move a human team Working : Player nearest to the ball moves through keyboard All other players return to their original positions (if maintain_formation is set) network Create a team that can be controlled over the network NetworkAgent Objects class NetworkAgent(Agent) Agent that can be controlled over the network (online) Use the register_keystroke() function to add keys from the server (socket) __init__ | __init__(id, team_id, pos, dir='L') Initialize the network agent The agent maintains a queue of the received keystrokes register_keystroke | register_keystroke(key) Register a keystroke Use this method within the server's socket move | move(state_prev, state, reward) Move the network agent based on it's internal queue NetworkTeam Objects class NetworkTeam(Team) A team of network players update | update(action, ball) Select a player (based on the Ball's state) and update the team's state based on the received actions and the ball's position select_player | select_player(ball) Select the player that is controlled by the keyboard Working : If ball is near the D-area, keeper gets automatic control Otherwise the player nearest to the ball has control (ties are broken randomly) register_keystroke | register_keystroke(key) Register a keystroke for the currently selected player formation_dir | formation_dir(id) Send player (with the given ID) to his designated place in the formation Working : If player is in-line (horizontally or vertically), move directly towards original point (U/L/D/R) Otherwise choose 2 directions that take you closer to the original point and choose one of them randomly (UL/UR/DL/DR) move | move(state_prev, state, reward) Move a network team Working : Player nearest to the ball moves through keyboard All other players return to their original positions (if maintain_formation is set) original_ai Create a hardcoded AI team i.e. actions are determined using simple geometry OriginalAIAgent Objects class OriginalAIAgent(Agent) Harcoded AI agents that play like the original AI (designed in 2013) Takes an additional difficulty arguement draw | draw(win, cam, team_id, debug=False) Draw an AI agent Also displays circles with AI_FAR_RADIUS and AI_NEAR_RADIUS when debug is True dist_to_line | dist_to_line(line, pt) perpendicular of a pt from the given line Attributes : line tuple - A straight line representing x line[0] + y line[1] + line[2] = 0 pt Point - a 2D point ai_move_with_ball | ai_move_with_ball(enemy_players, goal_x) How AI players move when they have the ball Attributes : enemy_players list - A list of the positions (coordinates) of the enemy players goal_x int - The x-coordinate of the enemy's goal post Returns an ACT Working : If this player has the ball Calculate vectors towards the goal and away from nearby players of the opposite team Add up all these vectors and move in that direction (probabilistically) enemy_players: positions of all of the enemy team ai_move_without_ball | ai_move_without_ball(ball) How AI players move when they do not have the ball Attributes : ball Point - position of the ball Returns an ACT Working : If the ball is within its AI_FAR_RADIUS , move towards the ball (probabilistically) Otherwise, do NOTHING ai_pass | ai_pass(team_players, enemy_team_players) How AI players pass the ball Attributes : team_players list - A list of the positions (coordinates) of the team players enemy_team_players list - A list of the positions (coordinates) of the enemy team players Returns an ACT Working : Pass the ball such that the perpendicular distance to the pass line is less than AI_MIN_PASS_DIST Pass is valid if no enemy is nearer than a team player in that direction Note - The origin is at top-left instead of the standard bottom-left so we map y to H-y ai_shoot | ai_shoot(gk, goal_x) How AI players shoot the ball Attributes : gk Agent - The enemy's goalkeeper agent goal_x int - the x-coordinate of the enemy's Returns an ACT Working : Only shoots if within AI_SHOOT_RADIUS of the enemy goal Shoots to maximize distance between keeper and shot while keeping the shot within goal boundaries Note - The origin is at top-left instead of the standard bottom-left so we map y to H-y gk_move | gk_move(goal_x, ball) How the AI goalkeeper moves Attributes : goal_x int - the x-coordinate of the enemy's ball Ball - The football object Returns an ACT Working : Moves towards the ball (tracks the y coordinate) Does not go outside the goals boundary gk_pass | gk_pass(enemy_players, goal_x) How the AI goalkeeper passes Attributes : enemy_players list - A list of the positions (coordinates) of the enemy players goal_x int - The x-coordinate of the team's goal post Returns an ACT Working : Pass such that enemy players in AI_SHOOT_RADIUS do not get the ball move | move(state_prev, state, reward, selected) Umbrella function that is used to move the player. Overrides the Agent's move() method Returns an ACT Working : if the selected player is the goal keeper and it has the ball: call ai_gk_pass() else if the selected player is the goal keeper and it does not have the ball: call ai_gk_move() else If the selected player is within AI_SHOOT_RADIUS of the enemy's goal post and it has the ball: call ai_shoot() else If the selected player has the ball: call ai_pass() or ai_move() based on the PASS_PROB else call ai_move_without_ball() or ai_move_with_ball() OriginalAITeam Objects class OriginalAITeam(Team) The AI team used in the original (C++) version select_player | select_player(ball) Select a player based on the balls position Working : If ball is near the D-area, keeper gets automatic control Otherwise the player nearest to the ball has control (ties are broken randomly) formation_dir | formation_dir(id) Send player (with the given ID) to his designated place in the formation Working : If player is in-line (horizontally or vertically), move directly towards original point (U/L/D/R) Otherwise choose 2 directions that take you closer to the original point and choose one of them randomly (UL/UR/DL/DR) move | move(state_prev, state, reward) Move each player in the team. Call this method to move the team","title":"Custom teams (and their agents)"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#random","text":"Create a random team i.e. team where each agent takes a random action (used for testing)","title":"random"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#randomagent-objects","text":"class RandomAgent(Agent) Agents that move randomly","title":"RandomAgent Objects"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#move","text":"| move(state_prev, state, reward) Move the agent randomly","title":"move"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#randomteam-objects","text":"class RandomTeam(Team) A team of random agents","title":"RandomTeam Objects"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#move_1","text":"| move(state_prev, state, reward) Move each player randomly","title":"move"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#human","text":"Create a Human team i.e. controlled by the keyboard","title":"human"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#humanagent-objects","text":"class HumanAgent(Agent) Agents controlled by humans","title":"HumanAgent Objects"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#draw","text":"| draw(win, cam, team_id, selected=0, debug=False) Draw the human agent. Also draws a red triangle on top of the selected player","title":"draw"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#move_2","text":"| move(state_prev, state, reward) Move the human agent based on the keyboard","title":"move"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#humanteam-objects","text":"class HumanTeam(Team) A team of human players","title":"HumanTeam Objects"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#update","text":"| update(action, ball) Select a player (based on the Ball's state) and update the team's state based on the received actions and the ball's position","title":"update"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#draw_1","text":"| draw(win, cam, debug) Draw the human team","title":"draw"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#select_player","text":"| select_player(ball) Select the player that is controlled by the keyboard Working : If ball is near the D-area, keeper gets automatic control Otherwise the player nearest to the ball has control (ties are broken randomly)","title":"select_player"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#formation_dir","text":"| formation_dir(id) Send player (with the given ID) to his designated place in the formation Working : If player is in-line (horizontally or vertically), move directly towards original point (U/L/D/R) Otherwise choose 2 directions that take you closer to the original point and choose one of them randomly (UL/UR/DL/DR)","title":"formation_dir"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#move_3","text":"| move(state_prev, state, reward) Move a human team Working : Player nearest to the ball moves through keyboard All other players return to their original positions (if maintain_formation is set)","title":"move"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#network","text":"Create a team that can be controlled over the network","title":"network"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#networkagent-objects","text":"class NetworkAgent(Agent) Agent that can be controlled over the network (online) Use the register_keystroke() function to add keys from the server (socket)","title":"NetworkAgent Objects"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#__init__","text":"| __init__(id, team_id, pos, dir='L') Initialize the network agent The agent maintains a queue of the received keystrokes","title":"__init__"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#register_keystroke","text":"| register_keystroke(key) Register a keystroke Use this method within the server's socket","title":"register_keystroke"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#move_4","text":"| move(state_prev, state, reward) Move the network agent based on it's internal queue","title":"move"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#networkteam-objects","text":"class NetworkTeam(Team) A team of network players","title":"NetworkTeam Objects"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#update_1","text":"| update(action, ball) Select a player (based on the Ball's state) and update the team's state based on the received actions and the ball's position","title":"update"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#select_player_1","text":"| select_player(ball) Select the player that is controlled by the keyboard Working : If ball is near the D-area, keeper gets automatic control Otherwise the player nearest to the ball has control (ties are broken randomly)","title":"select_player"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#register_keystroke_1","text":"| register_keystroke(key) Register a keystroke for the currently selected player","title":"register_keystroke"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#formation_dir_1","text":"| formation_dir(id) Send player (with the given ID) to his designated place in the formation Working : If player is in-line (horizontally or vertically), move directly towards original point (U/L/D/R) Otherwise choose 2 directions that take you closer to the original point and choose one of them randomly (UL/UR/DL/DR)","title":"formation_dir"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#move_5","text":"| move(state_prev, state, reward) Move a network team Working : Player nearest to the ball moves through keyboard All other players return to their original positions (if maintain_formation is set)","title":"move"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#original_ai","text":"Create a hardcoded AI team i.e. actions are determined using simple geometry","title":"original_ai"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#originalaiagent-objects","text":"class OriginalAIAgent(Agent) Harcoded AI agents that play like the original AI (designed in 2013) Takes an additional difficulty arguement","title":"OriginalAIAgent Objects"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#draw_2","text":"| draw(win, cam, team_id, debug=False) Draw an AI agent Also displays circles with AI_FAR_RADIUS and AI_NEAR_RADIUS when debug is True","title":"draw"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#dist_to_line","text":"| dist_to_line(line, pt) perpendicular of a pt from the given line Attributes : line tuple - A straight line representing x line[0] + y line[1] + line[2] = 0 pt Point - a 2D point","title":"dist_to_line"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#ai_move_with_ball","text":"| ai_move_with_ball(enemy_players, goal_x) How AI players move when they have the ball Attributes : enemy_players list - A list of the positions (coordinates) of the enemy players goal_x int - The x-coordinate of the enemy's goal post Returns an ACT Working : If this player has the ball Calculate vectors towards the goal and away from nearby players of the opposite team Add up all these vectors and move in that direction (probabilistically) enemy_players: positions of all of the enemy team","title":"ai_move_with_ball"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#ai_move_without_ball","text":"| ai_move_without_ball(ball) How AI players move when they do not have the ball Attributes : ball Point - position of the ball Returns an ACT Working : If the ball is within its AI_FAR_RADIUS , move towards the ball (probabilistically) Otherwise, do NOTHING","title":"ai_move_without_ball"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#ai_pass","text":"| ai_pass(team_players, enemy_team_players) How AI players pass the ball Attributes : team_players list - A list of the positions (coordinates) of the team players enemy_team_players list - A list of the positions (coordinates) of the enemy team players Returns an ACT Working : Pass the ball such that the perpendicular distance to the pass line is less than AI_MIN_PASS_DIST Pass is valid if no enemy is nearer than a team player in that direction Note - The origin is at top-left instead of the standard bottom-left so we map y to H-y","title":"ai_pass"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#ai_shoot","text":"| ai_shoot(gk, goal_x) How AI players shoot the ball Attributes : gk Agent - The enemy's goalkeeper agent goal_x int - the x-coordinate of the enemy's Returns an ACT Working : Only shoots if within AI_SHOOT_RADIUS of the enemy goal Shoots to maximize distance between keeper and shot while keeping the shot within goal boundaries Note - The origin is at top-left instead of the standard bottom-left so we map y to H-y","title":"ai_shoot"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#gk_move","text":"| gk_move(goal_x, ball) How the AI goalkeeper moves Attributes : goal_x int - the x-coordinate of the enemy's ball Ball - The football object Returns an ACT Working : Moves towards the ball (tracks the y coordinate) Does not go outside the goals boundary","title":"gk_move"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#gk_pass","text":"| gk_pass(enemy_players, goal_x) How the AI goalkeeper passes Attributes : enemy_players list - A list of the positions (coordinates) of the enemy players goal_x int - The x-coordinate of the team's goal post Returns an ACT Working : Pass such that enemy players in AI_SHOOT_RADIUS do not get the ball","title":"gk_pass"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#move_6","text":"| move(state_prev, state, reward, selected) Umbrella function that is used to move the player. Overrides the Agent's move() method Returns an ACT Working : if the selected player is the goal keeper and it has the ball: call ai_gk_pass() else if the selected player is the goal keeper and it does not have the ball: call ai_gk_move() else If the selected player is within AI_SHOOT_RADIUS of the enemy's goal post and it has the ball: call ai_shoot() else If the selected player has the ball: call ai_pass() or ai_move() based on the PASS_PROB else call ai_move_without_ball() or ai_move_with_ball()","title":"move"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#originalaiteam-objects","text":"class OriginalAITeam(Team) The AI team used in the original (C++) version","title":"OriginalAITeam Objects"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#select_player_2","text":"| select_player(ball) Select a player based on the balls position Working : If ball is near the D-area, keeper gets automatic control Otherwise the player nearest to the ball has control (ties are broken randomly)","title":"select_player"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#formation_dir_2","text":"| formation_dir(id) Send player (with the given ID) to his designated place in the formation Working : If player is in-line (horizontally or vertically), move directly towards original point (U/L/D/R) Otherwise choose 2 directions that take you closer to the original point and choose one of them randomly (UL/UR/DL/DR)","title":"formation_dir"},{"location":"api-documentation/custom-teams-%28and-their-agents%29/#move_7","text":"| move(state_prev, state, reward) Move each player in the team. Call this method to move the team","title":"move"},{"location":"api-documentation/game-menu/","text":"menu Defines the game menu (written using pygame-menu) Menu Objects class Menu() The game menu. Configure the game the way you want to start | start() Display the game menu","title":"Game menu"},{"location":"api-documentation/game-menu/#menu","text":"Defines the game menu (written using pygame-menu)","title":"menu"},{"location":"api-documentation/game-menu/#menu-objects","text":"class Menu() The game menu. Configure the game the way you want to","title":"Menu Objects"},{"location":"api-documentation/game-menu/#start","text":"| start() Display the game menu","title":"start"},{"location":"api-documentation/game/","text":"game Contains the central game class Manages interactions with the players and the ball Game Objects class Game() Class that controls the entire game __init__ | __init__(team1, team2, sound=True, difficulty=0.6, cam='default') Initializes the game Attributes : team1 Team - Right-facing team team2 Team - Left-facing team sound bool - Enable / Disable in-game sounds difficulty float - Game difficulty (0-1) check_interruptions | check_interruptions() Check for special keyboard buttons Sets internal flags to pause, quit the game or run it in debug mode same_team_collision | same_team_collision(team, free) Check if current player collides with any other players of the same team diff_team_collision | diff_team_collision(team1, team2, free) Check if current player collides with any other players of the opposite team collision | collision(team1, team2, ball) Handle collisions between all in-game players. text_draw | text_draw(win, text, rect, align='center') Utility to draw text Attributes : win pygame.display - window for rendering text (pygame.font (rendered)): The text object rect tuple - Rectangle specified as (x, y, width, height) align string - text alignment can be one of 'left', 'right', 'center' (defaults to 'center') goal_draw | goal_draw(win) Display the current score (goals for each side) field_draw | field_draw(win, hints) Draw the football pitch Attributes : win pygame.display - window for rendering hints bool - If (movement-based) hints are to be shown draw | draw(win, hints=True) Draw the entire game Calls field_draw() along with the draw() methods for each team and the ball practice_instr_draw | practice_instr_draw(win) Draw the practice game instructions (shows extra hints and keyboard controls) bar_draw | bar_draw(win, dim, w0, h0, w, h, col, val, debug_text, invert=False) Draw a bar in the pause menu (for statistics) Attributes : win - Main window used for all drawing dim [int] - extra dimensions for the pause menu w0 int - x coordinate of the bar's top left point h0 int - y coordinate of the bar's top left point w int - width of the bar h int - height of the bar col [int] - color of the bar (RGB tuple) val float - % of the bar to fill (between 0 and 1) debug_text str - Text to display in debug mode invert bool - Flip the bar left to right bar_label_draw | bar_label_draw(win, dim, w0, h0, w, h, text) Draw the label of a bar in the pause menu (for statistics) Attributes : win - Main window used for all drawing dim [int] - extra dimensions for the pause menu w0 int - x coordinate of the bar's top left point h0 int - y coordinate of the bar's top left point w int - width of the bar h int - height of the bar text str - Text to display in the label pause_box_draw | pause_box_draw(win, dim) Draw the skeleton of the pause menu (bg, title, exit button) Attributes : win - Main window used for all drawing dim [int] - extra dimensions for the pause menu pause_draw | pause_draw(win) Draw the pause menu Displays statistics for possession, pass accuracy and shot accuracy get_state | get_state() Create a state object that summarizes the entire game state = { 'team1': { 'players' # list of the team player's coordinates 'goal_x' # The x-coordinate of their goal post }, 'team2': { 'players' # list of the team player's coordinates 'goal_x' # The x-coordinate of their goal post }, 'ball' # Position of the ball } next | next() Move the game forward by 1 frame Passes state objects to the teams and pass their actions to move_next() move_next | move_next(a1, a2) Update the players' and ball's internal state based on the teams' actions Attributes : a1 list - list of actions (1 for each player) in team 1 a2 list - list of actions (1 for each player) in team 2 Each action must be a key in the ACT dictionary found in const.py","title":"Game"},{"location":"api-documentation/game/#game","text":"Contains the central game class Manages interactions with the players and the ball","title":"game"},{"location":"api-documentation/game/#game-objects","text":"class Game() Class that controls the entire game","title":"Game Objects"},{"location":"api-documentation/game/#__init__","text":"| __init__(team1, team2, sound=True, difficulty=0.6, cam='default') Initializes the game Attributes : team1 Team - Right-facing team team2 Team - Left-facing team sound bool - Enable / Disable in-game sounds difficulty float - Game difficulty (0-1)","title":"__init__"},{"location":"api-documentation/game/#check_interruptions","text":"| check_interruptions() Check for special keyboard buttons Sets internal flags to pause, quit the game or run it in debug mode","title":"check_interruptions"},{"location":"api-documentation/game/#same_team_collision","text":"| same_team_collision(team, free) Check if current player collides with any other players of the same team","title":"same_team_collision"},{"location":"api-documentation/game/#diff_team_collision","text":"| diff_team_collision(team1, team2, free) Check if current player collides with any other players of the opposite team","title":"diff_team_collision"},{"location":"api-documentation/game/#collision","text":"| collision(team1, team2, ball) Handle collisions between all in-game players.","title":"collision"},{"location":"api-documentation/game/#text_draw","text":"| text_draw(win, text, rect, align='center') Utility to draw text Attributes : win pygame.display - window for rendering text (pygame.font (rendered)): The text object rect tuple - Rectangle specified as (x, y, width, height) align string - text alignment can be one of 'left', 'right', 'center' (defaults to 'center')","title":"text_draw"},{"location":"api-documentation/game/#goal_draw","text":"| goal_draw(win) Display the current score (goals for each side)","title":"goal_draw"},{"location":"api-documentation/game/#field_draw","text":"| field_draw(win, hints) Draw the football pitch Attributes : win pygame.display - window for rendering hints bool - If (movement-based) hints are to be shown","title":"field_draw"},{"location":"api-documentation/game/#draw","text":"| draw(win, hints=True) Draw the entire game Calls field_draw() along with the draw() methods for each team and the ball","title":"draw"},{"location":"api-documentation/game/#practice_instr_draw","text":"| practice_instr_draw(win) Draw the practice game instructions (shows extra hints and keyboard controls)","title":"practice_instr_draw"},{"location":"api-documentation/game/#bar_draw","text":"| bar_draw(win, dim, w0, h0, w, h, col, val, debug_text, invert=False) Draw a bar in the pause menu (for statistics) Attributes : win - Main window used for all drawing dim [int] - extra dimensions for the pause menu w0 int - x coordinate of the bar's top left point h0 int - y coordinate of the bar's top left point w int - width of the bar h int - height of the bar col [int] - color of the bar (RGB tuple) val float - % of the bar to fill (between 0 and 1) debug_text str - Text to display in debug mode invert bool - Flip the bar left to right","title":"bar_draw"},{"location":"api-documentation/game/#bar_label_draw","text":"| bar_label_draw(win, dim, w0, h0, w, h, text) Draw the label of a bar in the pause menu (for statistics) Attributes : win - Main window used for all drawing dim [int] - extra dimensions for the pause menu w0 int - x coordinate of the bar's top left point h0 int - y coordinate of the bar's top left point w int - width of the bar h int - height of the bar text str - Text to display in the label","title":"bar_label_draw"},{"location":"api-documentation/game/#pause_box_draw","text":"| pause_box_draw(win, dim) Draw the skeleton of the pause menu (bg, title, exit button) Attributes : win - Main window used for all drawing dim [int] - extra dimensions for the pause menu","title":"pause_box_draw"},{"location":"api-documentation/game/#pause_draw","text":"| pause_draw(win) Draw the pause menu Displays statistics for possession, pass accuracy and shot accuracy","title":"pause_draw"},{"location":"api-documentation/game/#get_state","text":"| get_state() Create a state object that summarizes the entire game state = { 'team1': { 'players' # list of the team player's coordinates 'goal_x' # The x-coordinate of their goal post }, 'team2': { 'players' # list of the team player's coordinates 'goal_x' # The x-coordinate of their goal post }, 'ball' # Position of the ball }","title":"get_state"},{"location":"api-documentation/game/#next","text":"| next() Move the game forward by 1 frame Passes state objects to the teams and pass their actions to move_next()","title":"next"},{"location":"api-documentation/game/#move_next","text":"| move_next(a1, a2) Update the players' and ball's internal state based on the teams' actions Attributes : a1 list - list of actions (1 for each player) in team 1 a2 list - list of actions (1 for each player) in team 2 Each action must be a key in the ACT dictionary found in const.py","title":"move_next"},{"location":"api-documentation/point/","text":"point Defines a 2d Point Supports: addition subtaction multiplication distance calculation P Objects class P() Implementation of a 2-D point __init__ | __init__(x, y=None) Initialize an point Examples : pt1 = P(3,4) pt2 = P((3,4)) pt3 = P([3,4]) pt4 = P(pt3) val | @property | val() Return the value of the point as a tuple rounded to the nearest integer point mag | @property | mag() Return the magnitude of the point (it's distance from zero)","title":"Point"},{"location":"api-documentation/point/#point","text":"Defines a 2d Point Supports: addition subtaction multiplication distance calculation","title":"point"},{"location":"api-documentation/point/#p-objects","text":"class P() Implementation of a 2-D point","title":"P Objects"},{"location":"api-documentation/point/#__init__","text":"| __init__(x, y=None) Initialize an point Examples : pt1 = P(3,4) pt2 = P((3,4)) pt3 = P([3,4]) pt4 = P(pt3)","title":"__init__"},{"location":"api-documentation/point/#val","text":"| @property | val() Return the value of the point as a tuple rounded to the nearest integer point","title":"val"},{"location":"api-documentation/point/#mag","text":"| @property | mag() Return the magnitude of the point (it's distance from zero)","title":"mag"},{"location":"api-documentation/settings/","text":"","title":"Settings"},{"location":"api-documentation/stats/","text":"stats Manage game statistics Currently tracks: Possession Number of goals scored Pass accuracy Shot accuracy Stats Objects class Stats(object) Keep track of game statistics __init__ | __init__() Initializes the possession, pass accuracy and shot accuracy get_possession | get_possession() Return a tuple containing the current possesion (between 0 and 1) for each team It is rounded to 2 decimal places and their sum is guaranteed to be 1 get_pass_acc | get_pass_acc() Return a tuple containing the current pass accuracy (between 0 and 1) for each team It is rounded to 2 decimal places get_shot_acc | get_shot_acc() Return a tuple containing the current shot accuracy (between 0 and 1) for each team It is rounded to 2 decimal places","title":"Stats"},{"location":"api-documentation/stats/#stats","text":"Manage game statistics Currently tracks: Possession Number of goals scored Pass accuracy Shot accuracy","title":"stats"},{"location":"api-documentation/stats/#stats-objects","text":"class Stats(object) Keep track of game statistics","title":"Stats Objects"},{"location":"api-documentation/stats/#__init__","text":"| __init__() Initializes the possession, pass accuracy and shot accuracy","title":"__init__"},{"location":"api-documentation/stats/#get_possession","text":"| get_possession() Return a tuple containing the current possesion (between 0 and 1) for each team It is rounded to 2 decimal places and their sum is guaranteed to be 1","title":"get_possession"},{"location":"api-documentation/stats/#get_pass_acc","text":"| get_pass_acc() Return a tuple containing the current pass accuracy (between 0 and 1) for each team It is rounded to 2 decimal places","title":"get_pass_acc"},{"location":"api-documentation/stats/#get_shot_acc","text":"| get_shot_acc() Return a tuple containing the current shot accuracy (between 0 and 1) for each team It is rounded to 2 decimal places","title":"get_shot_acc"},{"location":"api-documentation/team/","text":"team Defines how a team is created, drawn and updated Override the set_players and move method to create a valid custom team (You can use a custom agent in your custom team) Team Objects class Team(ABC) Abstract class that controls a team of agents. Implement the move and set_players methods to instantiate __init__ | __init__(color=(0, 0, 0), formation='default', ids=list(range(NUM_TEAM))) Initialize the teams (not completely, some paramters are set using the init() method) Attributes : color tuple - The RGB value of the team formation string - The team's formation of the team. Must be a key of FORM from const.py ids [int] - Players to include in the team (identified by their ids) init | init(id, dir, diff) Set the teams id, direction and difficulty (only for AI teams) Also recolor the sprites based on the team's chosen color Attributes : id int - The team's id (must be either 1 or 2) dir str - The team's direction (must be either 'L' or 'R') diff float - The game difficult (between 0-1) Calls set_players() and set_color() set_color | set_color() Recolor the sprites using this team's color set_formation | set_formation(formation) Set the teams formation formation_toggle | formation_toggle() Toggle whether the team maintains its formation draw | draw(win, cam, debug=False) Draw the team Basically calls each players' draw() method update | update(action, ball) Update the team's state Basically calls each players' update() method set_players | @abstractmethod | set_players(ids=list(range(NUM_TEAM))) Implement this method to instantiate a valid team. Add players (of relevant class) to the team Attributes : ids list - IDs of players to include in the team (defaults to all the players) Requirements: Players are added to a list called players Their ids match their respective index in the array move | @abstractmethod | move(state_prev, state, reward) Implement this method for a valid team Attributes : state_prev dict - The lsat to last game state state dict - The last game state reward list - Reward returned from this state (Not implemented) Should return a list of valid actions (in the same order as each of the players)","title":"Team"},{"location":"api-documentation/team/#team","text":"Defines how a team is created, drawn and updated Override the set_players and move method to create a valid custom team (You can use a custom agent in your custom team)","title":"team"},{"location":"api-documentation/team/#team-objects","text":"class Team(ABC) Abstract class that controls a team of agents. Implement the move and set_players methods to instantiate","title":"Team Objects"},{"location":"api-documentation/team/#__init__","text":"| __init__(color=(0, 0, 0), formation='default', ids=list(range(NUM_TEAM))) Initialize the teams (not completely, some paramters are set using the init() method) Attributes : color tuple - The RGB value of the team formation string - The team's formation of the team. Must be a key of FORM from const.py ids [int] - Players to include in the team (identified by their ids)","title":"__init__"},{"location":"api-documentation/team/#init","text":"| init(id, dir, diff) Set the teams id, direction and difficulty (only for AI teams) Also recolor the sprites based on the team's chosen color Attributes : id int - The team's id (must be either 1 or 2) dir str - The team's direction (must be either 'L' or 'R') diff float - The game difficult (between 0-1) Calls set_players() and set_color()","title":"init"},{"location":"api-documentation/team/#set_color","text":"| set_color() Recolor the sprites using this team's color","title":"set_color"},{"location":"api-documentation/team/#set_formation","text":"| set_formation(formation) Set the teams formation","title":"set_formation"},{"location":"api-documentation/team/#formation_toggle","text":"| formation_toggle() Toggle whether the team maintains its formation","title":"formation_toggle"},{"location":"api-documentation/team/#draw","text":"| draw(win, cam, debug=False) Draw the team Basically calls each players' draw() method","title":"draw"},{"location":"api-documentation/team/#update","text":"| update(action, ball) Update the team's state Basically calls each players' update() method","title":"update"},{"location":"api-documentation/team/#set_players","text":"| @abstractmethod | set_players(ids=list(range(NUM_TEAM))) Implement this method to instantiate a valid team. Add players (of relevant class) to the team Attributes : ids list - IDs of players to include in the team (defaults to all the players) Requirements: Players are added to a list called players Their ids match their respective index in the array","title":"set_players"},{"location":"api-documentation/team/#move","text":"| @abstractmethod | move(state_prev, state, reward) Implement this method for a valid team Attributes : state_prev dict - The lsat to last game state state dict - The last game state reward list - Reward returned from this state (Not implemented) Should return a list of valid actions (in the same order as each of the players)","title":"move"}]}